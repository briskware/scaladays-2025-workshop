package com.rockthejvm.reviewboard.services

import zio.*
import com.rockthejvm.reviewboard.domain.Review
import com.rockthejvm.reviewboard.http.requests.CreateReviewRequest
import com.rockthejvm.reviewboard.repositories.ReviewRepository
import io.getquill.SnakeCase
import io.getquill.jdbczio.Quill

import java.time.Instant

trait ReviewService {
  def createReview(review: CreateReviewRequest): Task[Review]
  def getReviewsByCompanyId(companyId: Long): Task[List[Review]]
  def getReviewById(reviewId: Long): Task[Option[Review]]
}

class ReviewServiceLive(repository: ReviewRepository) extends ReviewService {

  override def createReview(request: CreateReviewRequest): Task[Review] = {
    val review: Review = Review(
      id = -1, // ID will be generated by the database
      companyId = request.companyId,
      userId = request.userId,
      management = request.management,
      culture = request.culture,
      salary = request.salary,
      benefits = request.benefits,
      wouldRecommend = request.wouldRecommend,
      review = request.review,
      created = Instant.now(),
      updated = Instant.now()
    )
    repository.create(review)
  }

  override def getReviewsByCompanyId(companyId: Long): Task[List[Review]] = {
    repository.getAllByCompanyId(companyId)
  }

  override def getReviewById(reviewId: Long): Task[Option[Review]] = {
    repository.getById(reviewId)
  }
}

object ReviewServiceLive {
  val layer: URLayer[ReviewRepository, ReviewService] =
    ZLayer.fromFunction(new ReviewServiceLive(_))
}
